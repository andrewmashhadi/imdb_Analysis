tmp_ls <- fromJSON(file=xpath_t250s)[["items"]]
item = 1
for (item in 1:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
fullTitle <- dbEscapeStrings(con, tmp_ls[[item]]$fullTitle)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
crew <- dbEscapeStrings(con, tmp_ls[[item]]$crew)
imDbRating <- as.numeric(tmp_ls[[item]]$imDbRating)
imDbRatingCount <- as.integer(tmp_ls[[item]]$imDbRatingCount)
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_t250s, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_t250s, " (id, ranking, title, fullTitle, year, crew, imDbRating, imDbRatingCount) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', '",
fullTitle, "', ",
year, ", '",
crew, "', ",
imDbRating, ", ",
imDbRatingCount, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Top 250 Shows Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Top 250 Shows Table", "\n")
}
} else {
cat( title, "already present in Top 250 Shows Table", "\n")
}
}
### load top 200 box office movies to database
xtableName_BO <- "imdb_boxOffice"
xbool.tableExists <- dbExistsTable(con, xtableName_BO)
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_BO, "  ",
"(id VARCHAR(15) NOT NULL, ",
"ranking INT(7), ",
"title TEXT, ",
"year INT(10), ",
"worldwideLifetimeGross BIGINT(12), ",
"domesticLifetimeGross BIGINT(12), ",
"domestic DOUBLE, ",
"foreignLifetimeGross BIGINT(12), ",
"_foreign DOUBLE, ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
tmp_ls <- fromJSON(file=xpath_BO)[["items"]]
item = 1
for (item in 2:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
ww_gross <- as.numeric(gsub('\\$|,', '', tmp_ls[[item]]$worldwideLifetimeGross))
d_gross <-gsub('\\$|,', '', tmp_ls[[item]]$domesticLifetimeGross)
d_gross <-as.numeric(gsub('-', '0', d_gross))
dom_prtg <-gsub('<|%', '', tmp_ls[[item]]$domestic)
dom_prtg <-as.numeric(gsub('-', '0', dom_prtg))
f_gross <-gsub('\\$|,', '', tmp_ls[[item]]$foreignLifetimeGross)
f_groww <-as.numeric(gsub('-', '0', f_gross))
for_prtg <-gsub('<|%', '', tmp_ls[[item]]$foreign)
for_prtg <-as.numeric(gsub('-', '0', for_prtg))
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_BO, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_BO, " (id, ranking, title, year, worldwideLifetimeGross, domesticLifetimeGross, domestic, foreignLifetimeGross, _foreign) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', ",
year, ", ",
ww_gross, ", ",
d_gross, ", ",
dom_prtg, ", ",
f_gross, ", ",
f_gross, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Box Office Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Box Office Table", "\n")
}
} else {
cat( title, "already present into Box Office Table", "\n")
}
}
dbDisconnect(con)
## author: dylan jorling
### MOVE SCRAPED JSON DATA TO MYSQL DATABASE
library(RMySQL)
library(rjson)
library(readr)
library(stringr)
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
### change path to where your json files located
xpath_details <-
file.path(xpath_main_data, "IMDb_data", "movie_tv_details")
### connect to my database
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
###########################################
### create details table
options(scipen=999)
xtableName_titles <- "imdb_details"
# drop table if need to redo, otherwise can comment out
# xx <- dbGetQuery(con, "DROP TABLE imdb_details")
xbool.tableExists <- dbExistsTable(con, xtableName_titles) ; xbool.tableExists
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_titles, "  ",
"(id VARCHAR(15) NOT NULL, ",
"title TEXT, ",
"fullTitle TEXT, ",
"type VARCHAR(20), ",
"year INT(10), ",
"date INT(15), ",
"runtime INT(5), ",
"plot TEXT, ",
"awards TEXT, ",
"directors TEXT, ",
"writers TEXT, ",
"stars TEXT, ",
"genres TEXT, ",
"companies TEXT, ",
"languages TEXT, ",
"rating VARCHAR(15), ",
"imDbRatingCount INT(10), ",
"imDbRating DOUBLE, ",
"metacriticRating INT(4), ",
"budget DOUBLE, ",
"grossUSA DOUBLE, ",
"grossWorldwide DOUBLE, ",
"keywords TEXT, ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
###########################################
### Load data into  sql table
file_ls <- list.files(xpath_details)
i <- 1
for(i in 1:length(file_ls)){
xthis_fn <- file_ls[i] ; xthis_fn
#load data
x_ls <- fromJSON( file=file.path(xpath_details, xthis_fn))
id <- x_ls$id
title <- gsub("'","",x_ls$title)
fullTitle <- gsub("'","",x_ls$fullTitle)
type <- x_ls$type
year <- x_ls$year
if(is.null(x_ls$releaseDate)){date <- "NULL"}
else if(x_ls$releaseDate == ""){date <- "NULL"}
else{date <- gsub("-", "", x_ls$releaseDate)}
if(is.null(x_ls$runtimeMins)){runtime <- NA} else{runtime <- as.integer(x_ls$runtimeMins)}
plot <- gsub("\"","",x_ls$plot)
plot <- gsub("'","",plot)
awards <- gsub("'","",x_ls$awards)
if(x_ls$directors == ""){directors = "NULL"} else{directors <- gsub("'","",x_ls$directors)}
if(x_ls$writers == ""){writers = "NULL"} else{writers <- gsub("'","",x_ls$writers)}
stars <- gsub("'","",x_ls$stars)
genres <- x_ls$genres
companies <- gsub("'","",x_ls$companies)
languages <- x_ls$languages
rating <- x_ls$contentRating
imdbratingcount <- x_ls$imDbRatingVotes
imdbrating <- x_ls$imDbRating
metacritic <- x_ls$metacriticRating
budget <- parse_number(x_ls$boxOffice$budget)
grossUS <- parse_number(x_ls$boxOffice$grossUSA)
if(is.na(grossUS)){grossUS = NULL}
grossworld <- parse_number(x_ls$boxOffice$cumulativeWorldwideGross)
keywords <- x_ls$keywords
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_titles, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_titles, " (id, title, fullTitle,",
" type, year, date, runtime, plot, awards, directors, writers,",
" stars, genres, companies, languages, rating, imDbRatingCount,",
" imDbRating, metacriticRating, budget, grossUSA, grossWorldwide,",
" keywords) ",
" VALUES ",
"('",
id, "', '",
title, "', '",
fullTitle, "', '",
type, "', ",
as.integer(year), ", ",
date, ", ",
if(is.na(runtime)){"NULL"} else{runtime}, ", '",
plot, "', '",
awards, "', '",
directors, "', '",
writers, "', '",
stars, "', '",
genres, "', '",
companies, "', '",
languages, "', '",
rating, "', ",
as.integer(imdbratingcount), ", ",
imdbrating, ", ",
if(is.null(metacritic)){"NULL"} else{as.integer(metacritic)}, ", ",
if(is.na(budget)){"NULL"} else{budget}, ", ",
if(is.null(grossUS)){"NULL"} else{grossUS}, ", ",
if(is.na(grossworld)){"NULL"} else{grossworld}, ", '",
keywords, "')"
)
qstr
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into IMDB Details Table failed for", title, "\n")
stop() ;
} else {
cat("Successfully inserted", title, "into IMDB Details Table", "\n")
}
} else {
cat( title, "already present in IMDB Details Table", "\n")
}
}
yy <- dbGetQuery(con, "SELECT * FROM imdb_details")
## using regression trees, random forest, or boosting, to predict imdbrating from
## budget, runtime, year, type, rating
## connect to db with imdb data
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
imdb_boxOffice <- dbGetQuery(con, "SELECT * FROM imdb_boxOffice")
imdb_details <- dbGetQuery(con, "SELECT * FROM imdb_details")
imdb_top250_movies <- dbGetQuery(con, "SELECT * FROM imdb_top250_movies")
imdb_top250_shows <- dbGetQuery(con, "SELECT * FROM imdb_top250_shows")
dbDisconnect(con)
write.csv(imdb_boxOffice, "C:\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_boxOffice.csv")
write.csv(imdb_details, "C:\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_details.csv")
write.csv(imdb_top250_movies, "C:\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_top250_movies.csv")
write.csv(imdb_top250_shows, "C:\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_top250_shows.csv")
write.csv(imdb_boxOffice, "C:\\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_boxOffice.csv")
write.csv(imdb_details, "C:\\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_details.csv")
write.csv(imdb_top250_movies, "C:\\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_top250_movies.csv")
write.csv(imdb_top250_shows, "C:\\Users\amiro\Desktop\Statistics 405\Week 5\Final_Project_Brainstorming\imdb_top250_shows.csv")
write.csv(imdb_boxOffice, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_boxOffice.csv")
write.csv(imdb_details, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details.csv")
write.csv(imdb_top250_movies, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_movies.csv")
write.csv(imdb_top250_shows, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_shows.csv")
imdb_boxOffice <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_boxOffice.csv")
imdb_details <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details.csv")
imdb_top250_movies <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_movies.csv")
imdb_top250_shows <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_shows.csv")
View(imdb_details)
names(imdb_details)
## print variables
names(imdb_details)
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, control = rpart.control(minsplit = 5))
print(tr)
library(rpart)
## print variables
names(imdb_details)
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, control = rpart.control(minsplit = 5))
print(tr)
library(rpart)
library(partykit)
plot(as.party(tr_numPreds2), tp_args = list(id = FALSE))
plot(as.party(tr), tp_args = list(id = FALSE))
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, control = rpart.control(minsplit = 5))
print(tr)
plotcp(tr_numPreds1)
## print plot to help choose cp
plotcp(tr)
## print variables
names(imdb_details)
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details)
print(tr)
## print plot to help choose cp
plotcp(tr)
plot(as.party(tr), tp_args = list(id = FALSE))
## print variables
names(imdb_details)
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details)
tr_2 <- prune(tr, cp = 0.074)
print(tr_2)
## plot the tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
tr_2 <- prune(tr, cp = 0.052)
print(tr_2)
## plot the tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
## plot the tree
plot(as.party(tr), tp_args = list(id = FALSE))
tr_2 <- prune(tr, cp = 0.01)
print(tr_2)
## plot the tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
tr_2 <- prune(tr, cp = 0.023)
print(tr_2)
## plot the tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- imdb_details[samp[from:to],]
train <- imdb_details[samp[-(from:to)],]
errors[k] <- mean((imdb_details$imDbRating - predict(imdb_rf, test))^2 ) # make a prediction on the test data p# and calculate the mean squared error
}
samp <- sample(673)
errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- imdb_details[samp[from:to],]
train <- imdb_details[samp[-(from:to)],]
errors[k] <- mean((imdb_details$imDbRating - predict(imdb_rf, test))^2 ) # make a prediction on the test data p# and calculate the mean squared error
}
## use random forest
library(randomForest)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3)
## use random forest
library(randomForest)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3, na.omit=TRUE)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3, na.omit=TRUE)
View(imdb_details)
imdb_details$imDbRating
imdb_details$budget
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3, na.action = na.omit)
samp <- sample(673)
errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- imdb_details[samp[from:to],]
train <- imdb_details[samp[-(from:to)],]
errors[k] <- mean((imdb_details$imDbRating - predict(imdb_rf, test))^2 ) # make a prediction on the test data p# and calculate the mean squared error
}
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- imdb_details[samp[from:to],]
test
predict(imdb_rf, test)
samp <- sample(673)
errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- imdb_details[samp[from:to],]
train <- imdb_details[samp[-(from:to)],]
errors[k] <- mean((imdb_details$imDbRating[samp[from:to]] - predict(imdb_rf, test))^2 ) # make a prediction on the test data p# and calculate the mean squared error
}
View(errors)
predict(imdb_rf, test)
imdb_details$budget
imdb_details$year
imdb_details$type
rating
imdb_details$stars
imdb_details$writers
imdb_details$type
imdb_details$companies
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- imdb_details[samp[from:to],]
train <- imdb_details[samp[-(from:to)],]
na.omit(test)
tt <- na.omit(test)
View(tt)
View(tt)
tt$X
samp <- sample(673)
errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- na.omit(imdb_details[samp[from:to],])
train <- imdb_details[samp[-(from:to)],]
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3, na.action = na.omit)
errors[k] <- mean((imdb_details$imDbRating[test$X] - predict(imdb_rf, test))^2 ) # make a prediction on the test data p# and calculate the mean squared error
}
View(errors)
mean(errors)
samp <- sample(673)
rf_errors <- matrix(0, nrow=1, ncol=10)
pt_errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- na.omit(imdb_details[samp[from:to],])
train <- imdb_details[samp[-(from:to)],]
## rf
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3, na.action = na.omit)
## pruned tree
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details)
pt <- prune(tr, cp = 0.023)
## calc errors
rf_errors[k] <- mean((imdb_details$imDbRating[test$X] - predict(imdb_rf, test))^2 )
pt_errors[k] <- mean((imdb_details$imDbRating[test$X] - predict(pt, test))^2 )
}
## compare errors
mean(rf_errors)
mean(pt_errors)
samp <- sample(673)
rf_errors <- matrix(0, nrow=1, ncol=10)
pt_errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*67
to <- 67*k # we will lose the last three observations
test <- na.omit(imdb_details[samp[from:to],])
train <- imdb_details[samp[-(from:to)],]
## rf
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, mtry = 3, na.action = na.omit)
## pruned tree
tr <- rpart(imDbRating ~ budget+runtime+year+type+rating, data = imdb_details, na.action = na.omit)
pt <- prune(tr, cp = 0.023)
## calc errors
rf_errors[k] <- mean((imdb_details$imDbRating[test$X] - predict(imdb_rf, test))^2 )
pt_errors[k] <- mean((imdb_details$imDbRating[test$X] - predict(pt, test))^2 )
}
## compare errors
mean(rf_errors)
mean(pt_errors)
##### PREDICTION ACCRUACY #####
imdb_details_no_NA <- na.omit(imdb_details)
## training error rate
sum(imdb_details_no_NA$imDbRating == predict(imdb_rf, imdb_details_no_NA))
imdb_details_no_NA$imDbRating
predict(imdb_rf, imdb_details_no_NA)
## training error rate
data.frame(imDbRating=imdb_details_no_NA$imDbRating, predictedRating=predict(imdb_rf, imdb_details_no_NA))
## training error rate
tr_comp <- data.frame(imDbRating=imdb_details_no_NA$imDbRating, predictedRating=predict(imdb_rf, imdb_details_no_NA))
View(tr_comp)
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enough <- sum(devs
)
devs
View(tr_comp)
close_enoughs
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- sum(devs < 0.3)/ length(devs)
close_enoughs
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- sum(devs < 0.4)/ length(devs)
close_enoughs
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- sum(devs < 0.5)/ length(devs)
close_enoughs
View(tr_comp)
close_enoughs <- function(x) sum(devs < x)/ length(devs)
close_enoughs(0.5)
plot(x, close_enoughs(x), xlab="deviation tolerance", ylab="training data accuracy")
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, close_enoughs(x), xlab="deviation tolerance", ylab="training data accuracy")
sapply(x, close_enoughs)
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), xlab="deviation tolerance", ylab="training data accuracy")
