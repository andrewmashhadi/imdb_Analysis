# checking out importance plots
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(inf_adjusted_gp ~ .,
data = juice(model_prep)
) %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.text = element_text(size = 30))
### view metrics
final_wf <- workflow() %>%
add_recipe(model_rec) %>%
add_model(final_rf)
final_res <- final_wf %>%
last_fit(data_split)
final_res %>%
collect_metrics()
27^4
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(partykit)
library(tidyverse)
library(randomForest)
library(tidyverse)
library(tidymodels)
library(vip)
library(ggparty)
library(ggplot2)
set.seed(777)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$star_power <- log(imdb_details_extd2$star_power+1)
imdb_details_extd2$wr_pop <- log(imdb_details_extd2$wr_pop+1)
## randomly select genres if more than one
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
imdb_details_extd2$oscar_nom <- as.factor(imdb_details_extd2$oscar_nom)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  runtime+genres+rating+dir_pop_fac+co_size+star_power+
wr_pop+release_period+budget_adj, data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"directory popularity",
"Nov. to Jan. release period",
"star power",
"genre is drama",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
## build model with tuned params
final_rf <- rand_forest(
mtry = 7,
trees = 1250,
) %>%
set_mode("classification") %>%
set_engine("ranger")
var)
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"directory popularity",
"Nov. to Jan. release period",
"star power",
"genre is drama",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"directory popularity",
"Nov. to Jan. release period",
"star power",
"genre is drama",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 25, margin = ggplot2::margin(r = 18)),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_y_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_y_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_y_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
scale_y_continuous(limit=c(0, 0.06))
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.06))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"Nov. to Jan. release period",
"directory popularity",
"genre is drama",
"star power",
"rating, PG-13",
"genre is other genre",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
set.seed(777)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$star_power <- log(imdb_details_extd2$star_power+1)
imdb_details_extd2$wr_pop <- log(imdb_details_extd2$wr_pop+1)
## randomly select genres if more than one
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
imdb_details_extd2$oscar_nom <- as.factor(imdb_details_extd2$oscar_nom)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  runtime+genres+rating+dir_pop_fac+co_size+star_power+
wr_pop+release_period+budget_adj, data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
## build model with tuned params
final_rf <- rand_forest(
mtry = 7,
trees = 1250,
) %>%
set_mode("classification") %>%
set_engine("ranger")
# checking out importance plots (measure of how much worse predictions get w/o the var)
df <- final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
)
df %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
df %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
df <- final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
)
df %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
df <- final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
)
df %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
df %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"genre is other genre",
"Nov. to Jan. release period",
"directory popularity",
"star power",
"rating, PG-13",
"genre is drama",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
df %>%
vip(geom = "col")+
scale_x_discrete(labels=rev(c("runtime",
"budget",
"genre is other genre",
"Nov. to Jan. release period",
"directory popularity",
"star power",
"rating, PG-13",
"genre is drama",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 30, face = "bold"),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
