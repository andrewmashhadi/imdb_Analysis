xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_t250m, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_t250m, " (id, ranking, title, fullTitle, year, crew, imDbRating, imDbRatingCount) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', '",
fullTitle, "', ",
year, ", '",
crew, "', ",
imDbRating, ", ",
imDbRatingCount, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Top 250 Movie Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Top 250 Movie Table", "\n")
}
} else {
cat( title, "already present in Top 250 Movie Table", "\n")
}
}
### load top 250 shows to database
xtableName_t250s <- "imdb_top250_shows"
xbool.tableExists <- dbExistsTable(con, xtableName_t250s)
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_t250s, "  ",
"(id VARCHAR(15) NOT NULL, ",
"ranking INT(7), ",
"title TEXT, ",
"fullTitle TEXT, ",
"year INT(10), ",
"crew TEXT, ",
"imDbRating DOUBLE, ",
"imDbRatingCount INT(10), ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
tmp_ls <- fromJSON(file=xpath_t250s)[["items"]]
item = 1
for (item in 1:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
fullTitle <- dbEscapeStrings(con, tmp_ls[[item]]$fullTitle)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
crew <- dbEscapeStrings(con, tmp_ls[[item]]$crew)
imDbRating <- as.numeric(tmp_ls[[item]]$imDbRating)
imDbRatingCount <- as.integer(tmp_ls[[item]]$imDbRatingCount)
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_t250s, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_t250s, " (id, ranking, title, fullTitle, year, crew, imDbRating, imDbRatingCount) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', '",
fullTitle, "', ",
year, ", '",
crew, "', ",
imDbRating, ", ",
imDbRatingCount, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Top 250 Shows Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Top 250 Shows Table", "\n")
}
} else {
cat( title, "already present in Top 250 Shows Table", "\n")
}
}
### load top 200 box office movies to database
xtableName_BO <- "imdb_boxOffice"
xbool.tableExists <- dbExistsTable(con, xtableName_BO)
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_BO, "  ",
"(id VARCHAR(15) NOT NULL, ",
"ranking INT(7), ",
"title TEXT, ",
"year INT(10), ",
"worldwideLifetimeGross BIGINT(12), ",
"domesticLifetimeGross BIGINT(12), ",
"domestic DOUBLE, ",
"foreignLifetimeGross BIGINT(12), ",
"_foreign DOUBLE, ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
tmp_ls <- fromJSON(file=xpath_BO)[["items"]]
item = 1
for (item in 2:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
ww_gross <- as.numeric(gsub('\\$|,', '', tmp_ls[[item]]$worldwideLifetimeGross))
d_gross <-gsub('\\$|,', '', tmp_ls[[item]]$domesticLifetimeGross)
d_gross <-as.numeric(gsub('-', '0', d_gross))
dom_prtg <-gsub('<|%', '', tmp_ls[[item]]$domestic)
dom_prtg <-as.numeric(gsub('-', '0', dom_prtg))
f_gross <-gsub('\\$|,', '', tmp_ls[[item]]$foreignLifetimeGross)
f_groww <-as.numeric(gsub('-', '0', f_gross))
for_prtg <-gsub('<|%', '', tmp_ls[[item]]$foreign)
for_prtg <-as.numeric(gsub('-', '0', for_prtg))
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_BO, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_BO, " (id, ranking, title, year, worldwideLifetimeGross, domesticLifetimeGross, domestic, foreignLifetimeGross, _foreign) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', ",
year, ", ",
ww_gross, ", ",
d_gross, ", ",
dom_prtg, ", ",
f_gross, ", ",
f_gross, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Box Office Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Box Office Table", "\n")
}
} else {
cat( title, "already present into Box Office Table", "\n")
}
}
dbDisconnect(con)
### MOVE SCRAPED JSON DATA TO MYSQL DATABASE
library(RMySQL)
library(rjson)
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
ximdb_api_key <- Sys.getenv("IMDB_API_KEY")
xpath_BO <-
file.path(xpath_main_data, "IMDb_data", "topBoxOffice", "BoxOfficeAllTime_Movies.json")
xpath_t250m <-
file.path(xpath_main_data, "IMDb_data", "top250", "top250_Movies.json")
xpath_t250s <-
file.path(xpath_main_data, "IMDb_data", "top250", "top250_TVs.json")
xpath_details <-
file.path(xpath_main_data, "IMDb_data", "movie_tv_details")
### connect to my database
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
#### load top 250 movies to database
xtableName_t250m <- "imdb_top250_movies"
xbool.tableExists <- dbExistsTable(con, xtableName_t250m)
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_t250m, "  ",
"(id VARCHAR(15) NOT NULL, ",
"ranking INT(7), ",
"title TEXT, ",
"fullTitle TEXT, ",
"year INT(10), ",
"crew TEXT, ",
"imDbRating DOUBLE, ",
"imDbRatingCount INT(10), ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
tmp_ls <- fromJSON(file=xpath_t250m)[["items"]]
item = 1
for (item in 1:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
fullTitle <- dbEscapeStrings(con, tmp_ls[[item]]$fullTitle)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
crew <- dbEscapeStrings(con, tmp_ls[[item]]$crew)
imDbRating <- as.numeric(tmp_ls[[item]]$imDbRating)
imDbRatingCount <- as.integer(tmp_ls[[item]]$imDbRatingCount)
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_t250m, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_t250m, " (id, ranking, title, fullTitle, year, crew, imDbRating, imDbRatingCount) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', '",
fullTitle, "', ",
year, ", '",
crew, "', ",
imDbRating, ", ",
imDbRatingCount, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Top 250 Movie Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Top 250 Movie Table", "\n")
}
} else {
cat( title, "already present in Top 250 Movie Table", "\n")
}
}
### load top 250 shows to database
xtableName_t250s <- "imdb_top250_shows"
xbool.tableExists <- dbExistsTable(con, xtableName_t250s)
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_t250s, "  ",
"(id VARCHAR(15) NOT NULL, ",
"ranking INT(7), ",
"title TEXT, ",
"fullTitle TEXT, ",
"year INT(10), ",
"crew TEXT, ",
"imDbRating DOUBLE, ",
"imDbRatingCount INT(10), ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
tmp_ls <- fromJSON(file=xpath_t250s)[["items"]]
item = 1
for (item in 1:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
fullTitle <- dbEscapeStrings(con, tmp_ls[[item]]$fullTitle)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
crew <- dbEscapeStrings(con, tmp_ls[[item]]$crew)
imDbRating <- as.numeric(tmp_ls[[item]]$imDbRating)
imDbRatingCount <- as.integer(tmp_ls[[item]]$imDbRatingCount)
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_t250s, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_t250s, " (id, ranking, title, fullTitle, year, crew, imDbRating, imDbRatingCount) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', '",
fullTitle, "', ",
year, ", '",
crew, "', ",
imDbRating, ", ",
imDbRatingCount, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Top 250 Shows Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Top 250 Shows Table", "\n")
}
} else {
cat( title, "already present in Top 250 Shows Table", "\n")
}
}
### load top 200 box office movies to database
xtableName_BO <- "imdb_boxOffice"
xbool.tableExists <- dbExistsTable(con, xtableName_BO)
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_BO, "  ",
"(id VARCHAR(15) NOT NULL, ",
"ranking INT(7), ",
"title TEXT, ",
"year INT(10), ",
"worldwideLifetimeGross BIGINT(12), ",
"domesticLifetimeGross BIGINT(12), ",
"domestic DOUBLE, ",
"foreignLifetimeGross BIGINT(12), ",
"_foreign DOUBLE, ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
tmp_ls <- fromJSON(file=xpath_BO)[["items"]]
item = 1
for (item in 2:length(tmp_ls)) {
id <- tmp_ls[[item]]$id
title <- dbEscapeStrings(con, tmp_ls[[item]]$title)
rank <- as.integer(tmp_ls[[item]]$rank)
year <- as.integer(tmp_ls[[item]]$year)
ww_gross <- as.numeric(gsub('\\$|,', '', tmp_ls[[item]]$worldwideLifetimeGross))
d_gross <-gsub('\\$|,', '', tmp_ls[[item]]$domesticLifetimeGross)
d_gross <-as.numeric(gsub('-', '0', d_gross))
dom_prtg <-gsub('<|%', '', tmp_ls[[item]]$domestic)
dom_prtg <-as.numeric(gsub('-', '0', dom_prtg))
f_gross <-gsub('\\$|,', '', tmp_ls[[item]]$foreignLifetimeGross)
f_groww <-as.numeric(gsub('-', '0', f_gross))
for_prtg <-gsub('<|%', '', tmp_ls[[item]]$foreign)
for_prtg <-as.numeric(gsub('-', '0', for_prtg))
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_BO, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_BO, " (id, ranking, title, year, worldwideLifetimeGross, domesticLifetimeGross, domestic, foreignLifetimeGross, _foreign) ",
" VALUES ",
"('",
id, "', ",
rank, ", '",
title, "', ",
year, ", ",
ww_gross, ", ",
d_gross, ", ",
dom_prtg, ", ",
f_gross, ", ",
f_gross, ")"
)
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Box Office Table failed for", title, "\n")
stop()
} else {
cat("Successfully inserted", title, "into Box Office Table", "\n")
}
} else {
cat( title, "already present into Box Office Table", "\n")
}
}
dbDisconnect(con)
## author: dylan jorling
### MOVE SCRAPED JSON DATA TO MYSQL DATABASE
library(RMySQL)
library(rjson)
library(readr)
library(stringr)
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
### change path to where your json files located
xpath_details <-
file.path(xpath_main_data, "IMDb_data", "movie_tv_details")
### connect to my database
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
###########################################
### create details table
options(scipen=999)
xtableName_titles <- "imdb_details"
# drop table if need to redo, otherwise can comment out
# xx <- dbGetQuery(con, "DROP TABLE imdb_details")
xbool.tableExists <- dbExistsTable(con, xtableName_titles) ; xbool.tableExists
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName_titles, "  ",
"(id VARCHAR(15) NOT NULL, ",
"title TEXT, ",
"fullTitle TEXT, ",
"type VARCHAR(20), ",
"year INT(10), ",
"date INT(15), ",
"runtime INT(5), ",
"plot TEXT, ",
"awards TEXT, ",
"directors TEXT, ",
"writers TEXT, ",
"stars TEXT, ",
"genres TEXT, ",
"companies TEXT, ",
"languages TEXT, ",
"rating VARCHAR(15), ",
"imDbRatingCount INT(10), ",
"imDbRating DOUBLE, ",
"metacriticRating INT(4), ",
"budget DOUBLE, ",
"grossUSA DOUBLE, ",
"grossWorldwide DOUBLE, ",
"keywords TEXT, ",
"PRIMARY KEY (id))"
)
xx <- dbGetQuery(con, qstr)
}
###########################################
### Load data into  sql table
file_ls <- list.files(xpath_details)
i <- 1
for(i in 1:length(file_ls)){
xthis_fn <- file_ls[i] ; xthis_fn
#load data
x_ls <- fromJSON( file=file.path(xpath_details, xthis_fn))
id <- x_ls$id
title <- gsub("'","",x_ls$title)
fullTitle <- gsub("'","",x_ls$fullTitle)
type <- x_ls$type
year <- x_ls$year
if(is.null(x_ls$releaseDate)){date <- "NULL"}
else if(x_ls$releaseDate == ""){date <- "NULL"}
else{date <- gsub("-", "", x_ls$releaseDate)}
if(is.null(x_ls$runtimeMins)){runtime <- NA} else{runtime <- as.integer(x_ls$runtimeMins)}
plot <- gsub("\"","",x_ls$plot)
plot <- gsub("'","",plot)
awards <- gsub("'","",x_ls$awards)
if(x_ls$directors == ""){directors = "NULL"} else{directors <- gsub("'","",x_ls$directors)}
if(x_ls$writers == ""){writers = "NULL"} else{writers <- gsub("'","",x_ls$writers)}
stars <- gsub("'","",x_ls$stars)
genres <- x_ls$genres
companies <- gsub("'","",x_ls$companies)
languages <- x_ls$languages
rating <- x_ls$contentRating
imdbratingcount <- x_ls$imDbRatingVotes
imdbrating <- x_ls$imDbRating
metacritic <- x_ls$metacriticRating
budget <- parse_number(x_ls$boxOffice$budget)
grossUS <- parse_number(x_ls$boxOffice$grossUSA)
if(is.na(grossUS)){grossUS = NULL}
grossworld <- parse_number(x_ls$boxOffice$cumulativeWorldwideGross)
keywords <- x_ls$keywords
xx <- dbGetQuery(con, paste0("SELECT id FROM ", xtableName_titles, " WHERE id='", id, "'"))
if( nrow(xx) == 0 ){
qstr <-
paste0(
"INSERT INTO ", xtableName_titles, " (id, title, fullTitle,",
" type, year, date, runtime, plot, awards, directors, writers,",
" stars, genres, companies, languages, rating, imDbRatingCount,",
" imDbRating, metacriticRating, budget, grossUSA, grossWorldwide,",
" keywords) ",
" VALUES ",
"('",
id, "', '",
title, "', '",
fullTitle, "', '",
type, "', ",
as.integer(year), ", ",
date, ", ",
if(is.na(runtime)){"NULL"} else{runtime}, ", '",
plot, "', '",
awards, "', '",
directors, "', '",
writers, "', '",
stars, "', '",
genres, "', '",
companies, "', '",
languages, "', '",
rating, "', ",
as.integer(imdbratingcount), ", ",
imdbrating, ", ",
if(is.null(metacritic)){"NULL"} else{as.integer(metacritic)}, ", ",
if(is.na(budget)){"NULL"} else{budget}, ", ",
if(is.null(grossUS)){"NULL"} else{grossUS}, ", ",
if(is.na(grossworld)){"NULL"} else{grossworld}, ", '",
keywords, "')"
)
qstr
xx <- try( dbGetQuery(con, qstr), silent=TRUE )
if( "try-error" %in% class(xx) ) {
cat("SQL insert into IMDB Details Table failed for", title, "\n")
stop() ;
} else {
cat("Successfully inserted", title, "into IMDB Details Table", "\n")
}
} else {
cat( title, "already present in IMDB Details Table", "\n")
}
}
yy <- dbGetQuery(con, "SELECT * FROM imdb_details")
