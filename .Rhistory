add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 3 grid points automatically (NOT WORKING)
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
View(juiced)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = 1000,
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 3 grid points automatically (NOT WORKING)
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_unknown(all_nominal(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
View(juiced)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_unknown(rating, new_level = "Approved") %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
View(imdb_details_extd2)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_unknown(rating, new_level = "other") %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = 1000,
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 3 grid points automatically (NOT WORKING)
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
View(imdb_details_extd2)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(site_info, threshold = 0.005) %>%
step_unknown(rating, new_level = "other") %>%
step_dummy(all_nominal(), -all_outcomes())
jucied %>% count(rating, sort + T)
jucied %>% count(rating, sort = T)
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(site_info, threshold = 0.005) %>%
step_unknown(rating, new_level = "other") %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.005) %>%
step_unknown(rating, new_level = "other") %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.005) %>%
step_unknown(rating, new_level = "rating_other") %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
jucied %>% count(rating, sort = T)
# check the step_other results
jucied %>% count(rating, sort = T)
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
juiced %>% count(rating, sort = T)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.005)
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
juiced %>% count(rating, sort = T)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.05)
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
juiced %>% count(rating, sort = T)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
juiced %>% count(rating, sort = T)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = 1000
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 3 grid points automatically (NOT WORKING)
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mean, mtry) %>%
pivot_longer(mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")
tune_res
View(tune_res)
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc")
tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc")
tune_res %>%
collect_metrics()
tune_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
select(mean, mtry) %>%
pivot_longer(mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "RMSE")
tune_res %>%
collect_metrics() %>%
filter(.metric == "rsq") %>%
select(mean, mtry) %>%
pivot_longer(mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "RMSE")
tune_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
select(mean, mtry) %>%
pivot_longer(mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "Rsq")
tune_res %>%
collect_metrics() %>%
filter(.metric == "rsq") %>%
select(mean, mtry) %>%
pivot_longer(mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "Rsq")
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
juiced %>% count(rating, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 10 grid points automatically (NOT WORKING)
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(rating, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 10 grid points automatically (NOT WORKING)
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
### rmse plot for tuning mtry and number of trees
tune_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
select(mean, trees, mtry) %>%
pivot_longer(trees:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "rmse")
### rsq plot for tuning mtry and number of trees
tune_res %>%
collect_metrics() %>%
filter(.metric == "rsq") %>%
select(mean, trees, mtry) %>%
pivot_longer(trees:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "Rsq")
### rmse plot for tuning mtry and number of trees
tune_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
select(mean, trees, mtry) %>%
pivot_longer(trees:mtry,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "rmse")
rf_grid <- grid_regular(
mtry(range = c(2, 5)),
trees(range = c(1000, 1300)),
levels = 5
)
regular_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = rf_grid
)
regular_res
rf_grid <- grid_regular(
mtry(range = c(2, 5)),
trees(range = c(1000, 1500)),
levels = 4
)
regular_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = rf_grid
)
regular_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
mutate(trees = factor(trees)) %>%
ggplot(aes(mtry, mean, color = trees)) +
geom_line(alpha = 0.5, size = 1.5) +
geom_point() +
labs(y = "rmse")
## rsq plot for tuning mtry and number of trees
regular_res %>%
collect_metrics() %>%
filter(.metric == "rsq") %>%
mutate(trees = factor(trees)) %>%
ggplot(aes(mtry, mean, color = trees)) +
geom_line(alpha = 0.5, size = 1.5) +
geom_point() +
labs(y = "rsq")
# seeing if importance plots still work with un-tuned mtry
final_rf <- rand_forest(
mtry = 3,
trees = 1166,
) %>%
set_mode("regression") %>%
set_engine("ranger")
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(legal_status ~ .,
data = juice(tree_prep) %>% select(-tree_id)
) %>%
vip(geom = "point")
# seeing if importance plots still work with un-tuned mtry
final_rf <- rand_forest(
mtry = 3,
trees = 1166,
) %>%
set_mode("regression") %>%
set_engine("ranger")
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(imDbRating ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "point")
final_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(final_rf)
final_res <- final_wf %>%
last_fit(trees_split)
final_res %>%
collect_metrics()
