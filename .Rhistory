) %>%
vip(geom = "point")
### view metrics
final_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(final_rf)
final_res <- final_wf %>%
last_fit(trees_split)
final_res %>%
collect_metrics()
## build model with tuned params
final_rf <- rand_forest(
mtry = 3,
trees = 1166,
) %>%
set_mode("regression") %>%
set_engine("ranger")
# checking out importance plots
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(imDbRating ~ .,
data = juice(tree_prep)
) %>%
vip(geom = "point")
### view metrics
final_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(final_rf)
final_res <- final_wf %>%
last_fit(trees_split)
final_res %>%
collect_metrics()
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+genres+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
### taking a closer look now
rf_grid <- grid_regular(
mtry(range = c(2, 5)),
trees(range = c(1000, 1500)),
levels = 4
)
regular_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = rf_grid
)
## rmse plot for tuning mtry and number of trees
regular_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
mutate(trees = factor(trees)) %>%
ggplot(aes(mtry, mean, color = trees)) +
geom_line(alpha = 0.5, size = 1.5) +
geom_point() +
labs(y = "rmse")
## rsq plot for tuning mtry and number of trees
regular_res %>%
collect_metrics() %>%
filter(.metric == "rsq") %>%
mutate(trees = factor(trees)) %>%
ggplot(aes(mtry, mean, color = trees)) +
geom_line(alpha = 0.5, size = 1.5) +
geom_point() +
labs(y = "rsq")
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(imDbRating ~  budget+runtime+genres+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
View(imdb_details_extd2)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  budget+runtime+genres+year+rating+imDbRating+award_wins+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  budget+runtime+genres+year+rating+imDbRating+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
summary(tree_rec)
View(juiced)
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  budget+runtime+genres+year+rating+imDbRating+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
`# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)`
library(tidyverse)
library(tidymodels)
library(vip)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
## clean genres
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  budget+runtime+genres+year+rating+imDbRating+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
`# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)`
# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)`
# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  budget+runtime+genres+year+rating+imDbRating+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
View(juiced)
summary(tree_rec)
imdb_details_extd2$oscar_nom <- as.character(imdb_details_extd2$oscar_nom)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  budget+runtime+genres+year+rating+imDbRating+dir_pop_fac+co_size,
data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
# build model
tune_spec <- rand_forest(
mtry = tune(),
trees = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
"classification"
tune_wf <- workflow() %>%
add_recipe(tree_rec) %>%
add_model(tune_spec)
# create a set of cross-validation resamples to use for tuning
trees_folds <- vfold_cv(trees_train)
# choose 10 grid points automatically
tune_res <- tune_grid(
tune_wf,
resamples = trees_folds,
grid = 10
)
imdb_rf = randomForest(imDbRating ~  budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = train, mtry = 3)
## compare the predictions to the data
comp <- data.frame(imDbRating=test$imDbRating, predictedRating=predict(imdb_rf, test))
devs <- abs(comp$imDbRating - comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="test accuracy with new vars", xlab="deviation tolerance", ylab="test data accuracy")
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
imdb_details_extd2$award_wins <- log(imdb_details_extd2$award_wins + 1)
library(randomForest)
## approximate test accuracy
samp <- sample(5098)
train <- na.omit(imdb_details_extd2[samp(1:4000), ])
test  <- na.omit(imdb_details_extd2[samp(4001:5098), ])
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = train, mtry = 3)
## compare the predictions to the data
comp <- data.frame(imDbRating=test$imDbRating, predictedRating=predict(imdb_rf, test))
devs <- abs(comp$imDbRating - comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="test accuracy with new vars", xlab="deviation tolerance", ylab="test data accuracy")
## approximate test accuracy
samp <- sample(5098)
train <- na.omit(imdb_details_extd2[samp(1:4000), ])
test  <- na.omit(imdb_details_extd2[samp(4001:5098), ])
## approximate test accuracy
samp <- sample(5098)
train <- na.omit(imdb_details_extd2[samp(1:4000), ])
test  <- na.omit(imdb_details_extd2[samp(4001:5098), ])
## approximate test accuracy
samp <- sample(5098)
train <- na.omit(imdb_details_extd2[samp[1:4000, ])
test  <- na.omit(imdb_details_extd2[samp[4001:5098, ])
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = train, mtry = 3)
## compare the predictions to the data
comp <- data.frame(imDbRating=test$imDbRating, predictedRating=predict(imdb_rf, test))
devs <- abs(comp$imDbRating - comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="test accuracy with new vars", xlab="deviation tolerance", ylab="test data accuracy")
## approximate test accuracy
samp <- sample(5098)
train <- na.omit(imdb_details_extd2[samp[1:4000],])
test  <- na.omit(imdb_details_extd2[samp[4001:5098],])
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = train, mtry = 3)
## compare the predictions to the data
comp <- data.frame(imDbRating=test$imDbRating, predictedRating=predict(imdb_rf, test))
devs <- abs(comp$imDbRating - comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="test accuracy with new vars", xlab="deviation tolerance", ylab="test data accuracy")
View(imdb_details_extd2)
which(imdb_details_extd2$oscar_nom == 1)
length(which(imdb_details_extd2$oscar_nom == 1))
length(imdb_details_extd2$oscar_nom)
