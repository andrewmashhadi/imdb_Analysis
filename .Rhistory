drv <- dbDriver("MySQL")
xdbsock <- ""
xROdbuser <- Sys.getenv("AM_AWS_MY_DB_ROUSER_USER")
xROpw     <- Sys.getenv("AM_AWS_MY_DB_ROUSER_PW")
xROdbname <- Sys.getenv("AM_AWS_MY_DB_ROUSER_DBNAME")
xROdbhost <- Sys.getenv("AM_AWS_MY_DB_ROUSER_HOST")
xROdbport <- as.integer( Sys.getenv("AM_AWS_MY_DB_ROUSER_PORT=3306") )
con <-
dbConnect(
drv,
user=xROdbuser,
password=xROpw,
dbname=xROdbname,
host=xROdbhost,
port=xROdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
###############################################
imdb_details <- dbGetQuery(con, "SELECT * FROM imdb_details_extd")
###############################################
head(imdb_details)
###############################################
# begin analysis of awards, directors, stars, writers, companies
# filter out tv shows and isolate above variables, along with id, title, year and imDbRating
df <- imdb_details %>% filter(type == "Movie")
df <- df[, c(1:3, 5, 9:12, 14, 18)]
#awards analysis create oscar categories
df$oscar_won <- rep(NA, length(df$awards))
for(i in 1:length(df$oscar_won)){
if(str_detect(df[i, 5], "Won (\\d+) Oscar") == TRUE){
df$oscar_won[i] <- 1
} else{
df$oscar_won[i] <- 0
}
}
df$oscar_won
df$oscar_nom <- rep(NA, length(df$awards))
for(i in 1:length(df$oscar_nom)){
if(df[i, 11] == 1){
df$oscar_nom[i] <- 1
}
else if(str_detect(df[i, 5], "Nominated for (\\d+) Oscar") == TRUE){
df$oscar_nom[i] <- 1
}
else{df$oscar_nom[i] <- 0}
}
df$oscar_nom
###extract total wins and total noms
df$award_wins <- rep(NA, length(df$awards))
for(i in 1:length(df$award_wins)){
if(str_detect(df[i,5], "Awards, (\\d+) win") == TRUE){
x <- str_extract(df[i,5], "Awards, (\\d+) win")
wins <- str_extract(x, "\\d+")
df$award_wins[i] <- as.integer(wins)
}
else if(str_detect(df[i,5], "(\\d+) win") == TRUE){
x <- str_extract(df[i,5], "(\\d+) win")
wins <- str_extract(x, "\\d+")
df$award_wins[i] <- as.integer(wins)
}
else{df$award_wins[i] <- 0}
}
df$award_wins
df$award_noms <- rep(NA, length(df$awards))
for(i in 1:length(df$award_noms)){
if(str_detect(df[i,5], "(\\d+) nomination")){
x <- str_extract(df[i,5], "(\\d+) nomination")
noms <- str_extract(x, "\\d+")
df$award_noms[i] <- as.integer(noms)
}
else{df$award_noms[i] <- df$award_wins[i]}
}
df$award_noms
# award wins/noms analysis
hist(df$award_wins)
hist(df$award_noms)
# check log transform
boxcox(df$imDbRating ~ df$award_wins)
boxcox(df$imDbRating ~ df$award_noms)
hist((df$award_wins^-.5))
hist(log(df$award_wins+1))
hist(log(df$award_noms+1))
# data now approx normal
# award model  analysis
mod_1 <- lm(imDbRating ~ oscar_nom + oscar_won + log(award_wins+1) + log(award_noms+1), data = df)
summary(mod_1)
# oscar_won not significant so take out of model:
mv_mod_1 <- lm(imDbRating ~ oscar_nom + log(award_wins+1) + log(award_noms+1), data = df)
summary(mv_mod_1)
###############################################
director_ls <- list()
for(i in 1:length(df$directors)){
director_ls[i] <- as.list(str_split(df[i, 6], ","))
}
writers_ls <- list()
for(i in 1:length(df$writers)){
writers_ls[i] <- as.list(str_split(df[i, 7], ","))
}
stars_ls <- list()
for(i in 1:length(df$stars)){
stars_ls[i] <- as.list(str_split(df[i, 8], ","))
}
# get frequencies
sort(table(unlist(director_ls)))
sort(table(unlist(writers_ls)))
sort(table(unlist(stars_ls)))
#and total frequencies
ttl_ls <- list(director_ls, writers_ls, stars_ls)
x <- sort(table(unlist(ttl_ls)), decreasing = TRUE)
head(x, n = 100)
## will identiy popular stars, directors, writers
star_tab <- sort(table(unlist(stars_ls)), decreasing = TRUE)
df_stars <- data.frame(names(star_tab), as.numeric(star_tab))
# use mean star appearances as proxy for actor/actress popularity
df$star_power <- rep(NA, length(stars_ls))
for(i in 1:length(stars_ls)){
x <- rep(NA, length(stars_ls[[i]]))
for(j in 1:length(stars_ls[[i]])){
y <- which(df_stars$names.star_tab. == stars_ls[[i]][j])
x[j] <- df_stars[y,2]
}
df$star_power[i] <- mean(x)
}
hist(df$star_power)
hist(df$star_power^.5)
hist(log(df$star_power))
lm_star <- lm(imDbRating ~ star_power, data = df)
summary(lm_star)
# unfortunately nowhere near significant
# repeat for directors will only select highest one
dir_tab <- sort(table(unlist(director_ls)), decreasing = TRUE)
df_dir <- data.frame(names(dir_tab), as.numeric(dir_tab))
df$dir_pop <- rep(NA, length(director_ls))
for(i in 1:length(director_ls)){
x <- rep(NA, length(director_ls[[i]]))
for(j in 1:length(director_ls[[i]])){
y <- which(df_dir$names.dir_tab. == director_ls[[i]][j])
x[j] <- df_dir[y,2]
}
df$dir_pop[i] <- max(x)
}
hist(df$dir_pop)
hist(log(df$dir_pop))
# log transform doesn't help skewed data...change to factor
quantile(df$dir_pop)
df$dir_pop_fac <- rep(NA, length(df$dir_pop))
for(i in 1:length(df$dir_pop)){
if(df$dir_pop[i] < 2){
df$dir_pop_fac[i] <- 0
}
else if(df$dir_pop[i] < 4){
df$dir_pop_fac[i] <- 1
}
else if(df$dir_pop[i] < 7){
df$dir_pop_fac[i] <- 2
}
else{
df$dir_pop_fac[i] <- 3
}
}
table(df$dir_pop_fac)
df$dir_pop_fac <- as.factor(df$dir_pop_fac)
lm_dir <- lm(imDbRating ~ dir_pop_fac, data = df)
summary(lm_dir)
# some value here w/ r^2 .019
# repeat for writors, will use mean writer appearances to normalize
wr_tab <- sort(table(unlist(writers_ls)), decreasing = TRUE)
df_wr <- data.frame(names(wr_tab), as.numeric(wr_tab))
df$wr_pop <- rep(NA, length(writers_ls))
for(i in 1:length(writers_ls)){
x <- rep(NA, length(writers_ls[[i]]))
for(j in 1:length(writers_ls[[i]])){
y <- which(df_wr$names.wr_tab. == writers_ls[[i]][j])
x[j] <- df_wr[y,2]
}
df$wr_pop[i] <- mean(x)
}
hist(df$wr_pop)
hist(log(df$wr_pop))
lm_wr <- lm(imDbRating ~ log(wr_pop), data = df)
summary(lm_wr)
# nothing significant here
###############################################
### companies analysis
companies_ls <- list()
for(i in 1:length(df$companies)){
companies_ls[i] <- as.list(str_split(df[i, 9], ","))
}
co_tab <- sort(table(unlist(companies_ls)), decreasing = TRUE)
df_comp <- data.frame(names(co_tab), as.numeric(co_tab))
#derive largest frequency of companies listed for each movie and use as studio size proxy
df$max_co_frequency <- rep(NA, length(companies_ls))
for(i in 1:length(companies_ls)){
x <- rep(NA, length(companies_ls[[i]]))
for(j in 1:length(companies_ls[[i]])){
y <- which(df_comp$names.co_tab. == companies_ls[[i]][j])
x[j] <- df_comp[y,2]
}
df$max_co_frequency[i] <- max(x)
}
## create factor level variable by quartiles
quantile(df$max_co_frequency)
df$co_size <- rep(NA, length(df$max_co_frequency))
for(i in 1:length(df$max_co_frequency)){
if(df$max_co_frequency[i] < 5){
df$co_size[i] <- 0
}
else if(df$max_co_frequency[i] < 29){
df$co_size[i] <- 1
}
else if(df$max_co_frequency[i] < 126){
df$co_size[i] <- 2
}
else{
df$co_size[i] <- 3
}
}
table(df$co_size)
df$co_size <- as.factor(df$co_size)
lm_co <- lm(imDbRating ~ co_size, data = df)
summary(lm_co)
## each factor level highly significant but only adds .018 adj r-square
# final summary of movie variables
lm_fin <- lm(imDbRating ~ oscar_nom + oscar_won + log(award_wins+1) + log(award_noms+1)+
dir_pop_fac + co_size, data = df)
summary(lm_fin)
#oscar_won and award_noms not significant
# use these variables in reg tree model...note that length=5098 (filtered by type=movie)
lm_fin <- lm(imDbRating ~ oscar_nom + log(award_wins+1) + dir_pop_fac + co_size, data = df)
summary(lm_fin)
# be sure to log transform +1 the award_wins var
add_vars <- data.frame(df$oscar_nom, df$award_wins, df$dir_pop_fac, df$co_size)
###############################################
###############################################
imdb_details <- dbGetQuery(con, "SELECT * FROM imdb_details_extd")
df2 <- imdb_details %>% filter(type == "Movie")
extd_df2 <-bind_cols(df2, add_vars)
dbDisconnect(con)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
dbDisconnect(con)
write.csv(extd_df2, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_boxOffice.csv")
write.csv(extd_df2, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
dbGetInfo(con)
imdb_boxOffice <- dbGetQuery(con, "SELECT * FROM imdb_boxOffice")
imdb_details <- dbGetQuery(con, "SELECT * FROM imdb_details")
imdb_details_extd <- dbGetQuery(con, "SELECT * FROM imdb_details_extd")
imdb_top250_movies <- dbGetQuery(con, "SELECT * FROM imdb_top250_movies")
imdb_top250_shows <- dbGetQuery(con, "SELECT * FROM imdb_top250_shows")
dbDisconnect(con)
write.csv(imdb_boxOffice, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_boxOffice.csv")
write.csv(imdb_details, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details.csv")
write.csv(imdb_details_extd, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd.csv")
write.csv(imdb_top250_movies, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_movies.csv")
write.csv(imdb_top250_shows, "C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_shows.csv")
imdb_boxOffice <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_boxOffice.csv")
imdb_details <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details.csv")
imdb_top250_movies <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_movies.csv")
imdb_top250_shows <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_top250_shows.csv")
imdb_details_extd <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd.csv")
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$award_wins = imdb_details_extd2$df.award_wins
imdb_details_extd2$co_size = imdb_details_extd2$df.co_size
imdb_details_extd2$dir_pop_fac = imdb_details_extd2$df.dir_pop_fac
imdb_details_extd2$oscar_nom = imdb_details_extd2$df.oscar_nom
names(imdb_details_extd2)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
names(imdb_details_extd2)
colnames(imdb_details_extd2)[25:28] <- c("oscar_nom", "award_wins", "dir_pop_fac", "co_size")
View(imdb_details_extd2)
names(imdb_details_extd2)
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = imdb_details_extd2)
library(tidyverse)
########### USING PRUNED TREE #############
library(rpart)
library(partykit)
## simple single tree
tr
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = imdb_details_extd2)
## print plot to help choose cp
plotcp(tr)
## prune the tree
tr_2 <- prune(tr, cp = 0.018)
print(tr_2)
## plot the pruned tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = imdb_details_extd2)
## print plot to help choose cp
plotcp(tr)
## prune the tree
tr_2 <- prune(tr, cp = 0.017)
print(tr_2)
## plot the pruned tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
library(randomForest)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
### COMPARING ERRORs
samp <- sample(5090)
rf_errors <- matrix(0, nrow=1, ncol=10)
pt_errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*509
to <- 509*k # we will lose the last 8 observations
test <- na.omit(imdb_details_extd2[samp[from:to],])
train <- imdb_details_extd2[samp[-(from:to)],]
## rf
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
## pruned tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2)
pt <- prune(tr, cp = 0.018)
## calc errors
rf_errors[k] <- mean((test$imDbRating - predict(imdb_rf, test))^2 )
pt_errors[k] <- mean((test$imDbRating - predict(pt, test))^2)
}
## compare errors
mean(rf_errors)
mean(pt_errors)
### COMPARING ERRORs
samp <- sample(5090)
rf1_errors <- matrix(0, nrow=1, ncol=10)
rf2_errors <- matrix(0, nrow=1, ncol=10)
pt_errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*509
to <- 509*k # we will lose the last 8 observations
test <- na.omit(imdb_details_extd2[samp[from:to],])
train <- imdb_details_extd2[samp[-(from:to)],]
## rf
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+rating, data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
imdb_rf2 <- randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
## pruned tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2)
pt <- prune(tr, cp = 0.018)
## calc errors
rf1_errors[k] <- mean((test$imDbRating - predict(imdb_rf, test))^2 )
rf2_errors[k] <- mean((test$imDbRating - predict(imdb_rf2, test))^2 )
pt_errors[k] <- mean((test$imDbRating - predict(pt, test))^2)
}
## compare errors
mean(rf1_errors)
mean(rf2_errors)
mean(pt_errors)
### COMPARING ERRORs
samp <- sample(5090)
rf1_errors <- matrix(0, nrow=1, ncol=10)
rf2_errors <- matrix(0, nrow=1, ncol=10)
lm_errors <- matrix(0, nrow=1, ncol=10)
pt_errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*509
to <- 509*k # we will lose the last 8 observations
test <- na.omit(imdb_details_extd2[samp[from:to],])
train <- imdb_details_extd2[samp[-(from:to)],]
## rf
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+rating, data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
imdb_rf2 <- randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
imdb_lm <- lm(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2)
## pruned tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2)
pt <- prune(tr, cp = 0.018)
## calc errors
rf1_errors[k] <- mean((test$imDbRating - predict(imdb_rf, test))^2 )
rf2_errors[k] <- mean((test$imDbRating - predict(imdb_rf2, test))^2 )
lm_errors[k] <- mean((test$imDbRating - predict(imdb_lm, test))^2)
pt_errors[k] <- mean((test$imDbRating - predict(pt, test))^2)
}
## compare errors
mean(rf1_errors)
mean(rf2_errors)
mean(lm_errors)
mean(pt_errors)
### COMPARING ERRORs
samp <- sample(5090)
rf1_errors <- matrix(0, nrow=1, ncol=10)
rf2_errors <- matrix(0, nrow=1, ncol=10)
lm_errors <- matrix(0, nrow=1, ncol=10)
pt_errors <- matrix(0, nrow=1, ncol=10)
for(k in 1:10){
from <- 1 + (k-1)*509
to <- 509*k # we will lose the last 8 observations
test <- na.omit(imdb_details_extd2[samp[from:to],])
train <- imdb_details_extd2[samp[-(from:to)],]
## rf
imdb_rf <- randomForest(imDbRating ~ budget+runtime+year+rating, data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
imdb_rf2 <- randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2,
mtry = 3,
na.action = na.omit)
imdb_lm <- lm(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2,
na.action = na.omit)
## pruned tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size,
data = imdb_details_extd2)
pt <- prune(tr, cp = 0.018)
## calc errors
rf1_errors[k] <- mean((test$imDbRating - predict(imdb_rf, test))^2 )
rf2_errors[k] <- mean((test$imDbRating - predict(imdb_rf2, test))^2 )
lm_errors[k] <- mean((test$imDbRating - predict(imdb_lm, test))^2)
pt_errors[k] <- mean((test$imDbRating - predict(pt, test))^2)
}
## compare errors
mean(rf1_errors)
mean(rf2_errors)
mean(lm_errors)
mean(pt_errors)
## obtain prediction accuracy
imdb_details_no_NA <- na.omit(imdb_details_extd2)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = imdb_details_no_NA,
mtry = 3)
## compare the predictions to the data
tr_comp <- data.frame(imDbRating=imdb_details_no_NA$imDbRating, predictedRating=predict(imdb_rf, imdb_details_no_NA))
## approximate training accuracy
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="training accuracy", xlab="deviation tolerance", ylab="training data accuracy")
samp <- sample(5098)
train <- na.omit(imdb_details_extd2[samp(1:4000), ])
test  <- na.omit(imdb_details_extd2[samp(4001:5098), ])
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating, data = train, mtry = 3)
## compare the predictions to the data
comp <- data.frame(imDbRating=test$imDbRating, predictedRating=predict(imdb_rf, test))
devs <- abs(comp$imDbRating - comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="test accuracy with new vars", xlab="deviation tolerance", ylab="test data accuracy")
## obtain prediction accuracy
imdb_details_no_NA <- na.omit(imdb_details_extd2)
imdb_rf = randomForest(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = imdb_details_no_NA,
mtry = 3)
## compare the predictions to the data
tr_comp <- data.frame(imDbRating=imdb_details_no_NA$imDbRating, predictedRating=predict(imdb_rf, imdb_details_no_NA))
## approximate training accuracy
devs <- abs(tr_comp$imDbRating - tr_comp$predictedRating)
close_enoughs <- function(x) sum(devs <= x)/ length(devs)
x <- seq(from=0,to=1,by=0.01)
plot(x, sapply(x, close_enoughs), main="training accuracy with new vars", xlab="deviation tolerance", ylab="training data accuracy")
## print variables
names(imdb_details_extd2)
## simple single tree
tr <- rpart(imDbRating ~ budget+runtime+year+rating+oscar_nom+award_wins+dir_pop_fac+co_size, data = imdb_details_extd2)
## print plot to help choose cp
plotcp(tr)
## prune the tree
tr_2 <- prune(tr, cp = 0.017)
print(tr_2)
## plot the pruned tree
plot(as.party(tr_2), tp_args = list(id = FALSE))
