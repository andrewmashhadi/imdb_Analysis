genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "drama",
grepl("Fantasy",
genres,
ignore.case = TRUE) ~ "Fantasy",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Mystery",
genres,
ignore.case = TRUE) ~ "Mystery",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Sci-Fi",
genres,
ignore.case = TRUE) ~ "Sci-Fi",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
TRUE ~ "other")))
View(df)
df %>%
group_by(df) %>%
mean(oscar_nom)
df %>%
group_by(genre_binned) %>%
mean(oscar_nom)
df %>%
na.omit() %>%
group_by(genre_binned) %>%
mean(oscar_nom)
df %>%
na.omit() %>%
group_by(genre_binned) %>%
mean(oscar_nom, na.omit=T)
df$oscar_nom <- as.numeric(df$oscar_nom)
df %>%
na.omit() %>%
group_by(genre_binned) %>%
mean(oscar_nom, na.omit=T)
View(df)
set.seed(777)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$star_power <- log(imdb_details_extd2$star_power+1)
imdb_details_extd2$wr_pop <- log(imdb_details_extd2$wr_pop+1)
## randomly select genres if more than one
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "drama",
grepl("Fantasy",
genres,
ignore.case = TRUE) ~ "Fantasy",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Mystery",
genres,
ignore.case = TRUE) ~ "Mystery",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Sci-Fi",
genres,
ignore.case = TRUE) ~ "Sci-Fi",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
TRUE ~ "other")))
df  %>%
group_by(genre_binned) %>%
mean(oscar_nom)
df$oscar_nom
class(df$oscar_nom)
mean(df$oscar_nom)
df  %>%
group_by(genre_binned) %>%
summarize(mean = mean(oscar_nom, na.rm = TRUE))
(df %>%
group_by(genre_binned) %>%
summarize(mean = mean(oscar_nom, na.rm = TRUE)))
df2 <- df %>%
group_by(genre_binned) %>%
summarize(mean = mean(oscar_nom, na.rm = TRUE))
df2
set.seed(777)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$star_power <- log(imdb_details_extd2$star_power+1)
imdb_details_extd2$wr_pop <- log(imdb_details_extd2$wr_pop+1)
## randomly select genres if more than one
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "drama",
grepl("Fantasy",
genres,
ignore.case = TRUE) ~ "Fantasy",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Mystery",
genres,
ignore.case = TRUE) ~ "Mystery",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Sci-Fi",
genres,
ignore.case = TRUE) ~ "Sci-Fi",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
grepl("Unknown",
genres,
ignore.case = TRUE) ~ "Unknown",
TRUE ~ "other")))
df2 <- df %>%
group_by(genre_binned) %>%
summarize(mean = mean(oscar_nom, na.rm = TRUE))
df2
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar()
df2 <- df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE))
df2
ggplot(df2, aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar()
ggplot(df2, aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity")
ggplot(df2, aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity")
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "Drama",
grepl("Fantasy",
genres,
ignore.case = TRUE) ~ "Fantasy",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Mystery",
genres,
ignore.case = TRUE) ~ "Mystery",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Sci-Fi",
genres,
ignore.case = TRUE) ~ "Sci-Fi",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
grepl("Unknown",
genres,
ignore.case = TRUE) ~ "Unknown",
TRUE ~ "Other")))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE))
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 40, face = "bold"),
axis.title.x = element_text(size = 40, margin = margin(t = 20)),
axis.title.y = element_text(size = 40, margin = margin(r = 20)),
axis.text = element_text(size = 40))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE))
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal()
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE))
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity")
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity")
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 40, face = "bold"),
axis.title.x = element_text(size = 40, margin = margin(t = 20)),
axis.title.y = element_text(size = 40, margin = margin(r = 20)),
axis.text = element_text(size = 40))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 40, face = "bold"),
axis.title.x = element_text(size = 40),
axis.title.y = element_text(size = 40),
axis.text = element_text(size = 40))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df %>%
group_by(release_period) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE))
df2<-df %>%
group_by(release_period) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE))
df2
df %>%
group_by(release_period) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Release Period") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Release Period") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df %>%
group_by(release_period) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = release_period, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Release Period") +
ylab("Percetage of Oscar Nominees") +
ggtitle("Oscar Nominees By Release Period") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df %>%
group_by(release_period) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = release_period, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Release Period") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Release Period") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "Drama",
grepl("Action",
genres,
ignore.case = TRUE) ~ "Action",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
grepl("Unknown",
genres,
ignore.case = TRUE) ~ "Unknown",
TRUE ~ "Other")))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "Drama",
grepl("Action",
genres,
ignore.case = TRUE) ~ "Action",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
grepl("Unknown",
genres,
ignore.case = TRUE) ~ "Unknown",
TRUE ~ "Other")))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms)) +
geom_bar(stat = "identity") +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text = element_text(size = 10))
set.seed(777)
imdb_details_extd3 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd3.csv")
imdb_details_extd3$star_power <- log(imdb_details_extd3$star_power+1)
imdb_details_extd3$wr_pop <- log(imdb_details_extd3$wr_pop+1)
imdb_details_extd3$inf_adjusted_gp = imdb_details_extd3$inf_adjusted_gp^.25
## randomly select genres if more than one
tt<- lapply(imdb_details_extd3$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd3$genres <- r_genre
df <- filter(imdb_details_extd3, type == "Movie") %>%
na.omit()
data_split <- initial_split(df)
data_train <- training(data_split)
data_test <- testing(data_split)
# build recipe (just instructions)
model_rec <- recipe(inf_adjusted_gp ~ runtime+genres+rating+dir_pop_fac+release_period+
runtime+co_size+star_power+wr_pop,
data = data_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
model_prep <- prep(model_rec)
juiced <- juice(model_prep)
# run the below to check the step_other results (doesnt work if step_dummy already used)
# juiced %>% count(genres, sort = T)
# report details
summary(model_rec)
## build rf model with tuned params
final_rf <- rand_forest(
mtry = 7,
trees = 1100,
) %>%
set_mode("regression") %>%
set_engine("ranger")
# checking out importance plots
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(inf_adjusted_gp ~ .,
data = juice(model_prep)
) %>%
vip(geom = "col")+
theme_minimal() +
theme(plot.title = element_text(size = 30),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.text = element_text(size = 30))
### view metrics
final_wf <- workflow() %>%
add_recipe(model_rec) %>%
add_model(final_rf)
final_res <- final_wf %>%
last_fit(data_split)
final_res %>%
collect_metrics()
27^4
