axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=star_power,y=inf_adjusted_gp^.25)) +
geom_point(color="lightseagreen") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Star Power") +
ggtitle("Inflation Adjusted Gross Profit^.25 vs Star Power") +
theme_minimal() +
theme(plot.title = element_text(size = 34, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df, aes(x=as.factor(oscar_nom),y=star_power,fill=factor(oscar_nom))) +
geom_boxplot(fill="lightseagreen",color = "black",show.legend = F) +
ylab("Star Power") +
xlab("Oscar Nominated") +
ggtitle("Boxplot of Star Power by Oscar Nom") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 30))
ggplot(data = df_box, aes(x=wr_pop,y=inf_adjusted_gp^.25)) +
geom_point(color="lightseagreen") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Writer Popularity") +
ggtitle("Inflation Adjusted Gross Profit^.25 vs Writer Popularity") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 30))
ggplot(data = df_box, aes(x=wr_pop,y=inf_adjusted_gp^.25)) +
geom_point(color="lightseagreen") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Writer Popularity") +
ggtitle("Inflation Adjusted Gross Profit^.25 vs Writer Popularity") +
theme_minimal() +
theme(plot.title = element_text(size = 34, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=wr_pop,y=inf_adjusted_gp^.25)) +
geom_point(color="lightseagreen") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Writer Popularity") +
ggtitle("Inflation Adjusted Gross Profit^.25 vs Writer Pop.") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df, aes(x=as.factor(oscar_nom),y=wr_pop,fill=factor(oscar_nom))) +
geom_boxplot(fill="lightseagreen",color = "black",show.legend = F) +
ylab("Writer Popularity") +
xlab("Oscar Nominated") +
ggtitle("Boxplot of Writer Popularity by Oscar Nom") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 28))
ggplot(data = df_box, aes(x=dir_pop_fac,y=inf_adjusted_gp^.25)) +
geom_boxplot(fill="lightseagreen", color = "black") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Director Popularity") +
ggtitle("Boxplot of Gross Profit^.25 by Director Pop.") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=dir_pop_fac,y=inf_adjusted_gp^.25)) +
geom_boxplot(fill="lightseagreen", color = "black") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Director Popularity") +
ggtitle("Boxplot of Gross Profit^.25 by Director Popularity") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=dir_pop_fac,y=inf_adjusted_gp^.25)) +
geom_boxplot(fill="lightseagreen", color = "black") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Director Popularity") +
ggtitle("Boxplot of Gross Profit^.25 by Director Pop.") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=dir_pop_fac,y=inf_adjusted_gp^.25)) +
geom_boxplot(fill="lightseagreen", color = "black") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Director Popularity") +
ggtitle("Boxplot of Gross Profit^.25 by Director Popularity") +
theme_minimal() +
theme(plot.title = element_text(size = 34, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=wr_pop,y=inf_adjusted_gp^.25)) +
geom_point(color="lightseagreen") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Writer Popularity") +
ggtitle("Inf. Adjusted Gross Profit^.25 vs Writer Popularity") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=wr_pop,y=inf_adjusted_gp^.25)) +
geom_point(color="lightseagreen") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Writer Popularity") +
ggtitle("Inf. Adj. Gross Profit^.25 vs Writer Popularity") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df_box, aes(x=co_size,y=inf_adjusted_gp^.25)) +
geom_boxplot(fill="lightseagreen", color = "black") +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Company Size") +
ggtitle("Boxplot of Gross Profit^.25 by Company Size") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 24))
ggplot(data = df_box, aes(x=release_period,y=inf_adjusted_gp^.25)) +
geom_boxplot(fill="lightseagreen", color = "black") +
scale_x_discrete(labels=c("Aug. to Oct.",
"Feb. to Apr.",
"May to July",
"Nov. to Jan.")) +
ylab("Inflation Adjusted Gross Profit^.25") +
xlab("Release Period") +
ggtitle("Boxplot of Gross Profit^.25 by Release Period") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 23))
ggplot(data = df, aes(x=as.factor(oscar_nom),y=budget_adj, fill=factor(oscar_nom))) +
geom_boxplot(fill="lightseagreen",color = "black",show.legend = F) +
scale_y_continuous(labels = seq(0,1000,100), breaks = seq(0, 1000000000, 100000000), expand = c(0,0)) +
ylab("Inflation Adjusted Budget (Millions $)") +
xlab("Oscar Nominated") +
ggtitle("Boxplot of Inflation Adjusted Budget by Oscar Nom") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df, aes(x=as.factor(oscar_nom),y=budget_adj, fill=factor(oscar_nom))) +
geom_boxplot(fill="lightseagreen",color = "black",show.legend = F) +
scale_y_continuous(labels = seq(0,1000,100), breaks = seq(0, 1000000000, 100000000), expand = c(0,0)) +
ylab("Inflation Adjusted Budget (Millions $)") +
xlab("Oscar Nominated") +
ggtitle("Boxplot of Inf. Adj. Budget by Oscar Nom") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df, aes(x=as.factor(oscar_nom),y=budget_adj, fill=factor(oscar_nom))) +
geom_boxplot(fill="lightseagreen",color = "black",show.legend = F) +
scale_y_continuous(labels = seq(0,1000,100), breaks = seq(0, 1000000000, 100000000), expand = c(0,0)) +
ylab("Inflation Adjusted Budget (Millions $)") +
xlab("Oscar Nominated") +
ggtitle("Boxplot of Inf. Adj. Budget by Oscar Nom") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 29, margin = margin(t = 20)),
axis.title.y = element_text(size = 29, margin = margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(data = df, aes(x=as.factor(oscar_nom),y=budget_adj, fill=factor(oscar_nom))) +
geom_boxplot(fill="lightseagreen",color = "black",show.legend = F) +
scale_y_continuous(labels = seq(0,1000,100), breaks = seq(0, 1000000000, 100000000), expand = c(0,0)) +
ylab("Inflation Adjusted Budget (Millions $)") +
xlab("Oscar Nominated") +
ggtitle("Boxplot of Inf. Adj. Budget by Oscar Nom") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 28, margin = margin(t = 20)),
axis.title.y = element_text(size = 28, margin = margin(r = 20)),
axis.text = element_text(size = 25))
knitr::opts_chunk$set(echo = TRUE)
set.seed(777)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$star_power <- log(imdb_details_extd2$star_power+1)
imdb_details_extd2$wr_pop <- log(imdb_details_extd2$wr_pop+1)
## randomly select genres if more than one
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
imdb_details_extd2$oscar_nom <- as.factor(imdb_details_extd2$oscar_nom)
set.seed(777)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
library(rpart)
library(partykit)
library(tidyverse)
library(randomForest)
library(tidyverse)
library(tidymodels)
library(vip)
library(ggparty)
library(ggplot2)
set.seed(777)
trees_df <- filter(imdb_details_extd2, type == "Movie") %>%
na.omit()
trees_split <- initial_split(trees_df)
trees_train <- training(trees_split)
trees_test <- testing(trees_split)
# build recipe (just instructions)
tree_rec <- recipe(oscar_nom ~  runtime+genres+rating+dir_pop_fac+co_size+star_power+
wr_pop+release_period+budget_adj, data = trees_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
tree_prep <- prep(tree_rec)
juiced <- juice(tree_prep)
# check the step_other results
# juiced %>% count(genres, sort = T)
summary(tree_rec)
## build model with tuned params
final_rf <- rand_forest(
mtry = 7,
trees = 1250,
) %>%
set_mode("classification") %>%
set_engine("ranger")
# checking out importance plots (measure of how much worse predictions get w/o the var)
df <- final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(oscar_nom ~ .,
data = juice(tree_prep)
)
df %>%
vip(geom = "col")+
labs(title="Variable Importances") +
scale_x_discrete(labels=rev(c("runtime",
"budget",
"genre is other genre",
"Nov. to Jan. release period",
"directory popularity",
"star power",
"rating, PG-13",
"genre is drama",
"rating, R",
"writer popularity"))) +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.text = element_text(size = 25)) +
scale_y_continuous(limit=c(0, 0.055))
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "Drama",
grepl("Action",
genres,
ignore.case = TRUE) ~ "Action",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
grepl("Unknown",
genres,
ignore.case = TRUE) ~ "Unknown",
TRUE ~ "Other")))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms, fill= genre_binned)) +
geom_bar(stat = "identity", show.legend=F) +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 17))
set.seed(777)
imdb_details_extd2 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd2.csv")
imdb_details_extd2$star_power <- log(imdb_details_extd2$star_power+1)
imdb_details_extd2$wr_pop <- log(imdb_details_extd2$wr_pop+1)
## randomly select genres if more than one
tt<- lapply(imdb_details_extd2$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd2$genres <- r_genre
df <- imdb_details_extd2 %>%
mutate(
genre_binned           = as.factor(case_when(grepl("Adventure",
genres,
ignore.case = TRUE) ~ "Adventure",
grepl("Comedy",
genres,
ignore.case = TRUE) ~ "Comedy",
grepl("Crime",
genres,
ignore.case = TRUE) ~ "Crime",
grepl("Drama",
genres,
ignore.case = TRUE) ~ "Drama",
grepl("Action",
genres,
ignore.case = TRUE) ~ "Action",
grepl("Horror",
genres,
ignore.case = TRUE) ~ "Horror",
grepl("Romance",
genres,
ignore.case = TRUE) ~ "Romance",
grepl("Thriller",
genres,
ignore.case = TRUE) ~ "Thriller",
grepl("Unknown",
genres,
ignore.case = TRUE) ~ "Unknown",
TRUE ~ "Other")))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms, fill= genre_binned)) +
geom_bar(stat = "identity", show.legend=F) +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 17))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms, fill= genre_binned)) +
geom_bar(stat = "identity", show.legend=F) +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 17))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms, fill= genre_binned)) +
geom_bar(stat = "identity", show.legend=F) +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
df %>%
group_by(genre_binned) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = genre_binned, y = Perc_Oscar_Noms, fill= genre_binned)) +
geom_bar(stat = "identity", show.legend=F) +
xlab("Genre") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Genres") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 20))
df %>%
group_by(release_period) %>%
summarize(Perc_Oscar_Noms = mean(oscar_nom, na.rm = TRUE)) %>%
ggplot(aes(x = release_period, y = Perc_Oscar_Noms, fill= release_period)) +
geom_bar(stat = "identity", show.legend=F) +
scale_x_discrete(labels=c("Aug. to Oct.",
"Feb. to Apr.",
"May to July",
"Nov. to Jan.")) +
xlab("Release Period") +
ylab("Proportion of Oscar Nominees") +
ggtitle("Oscar Nominees By Release Period") +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 26))
set.seed(777)
imdb_details_extd3 <- read.csv("C:\\Users\\amiro\\Desktop\\Statistics 405\\Week 5\\Final_Project_Brainstorming\\imdb_details_extd3.csv")
imdb_details_extd3$star_power <- log(imdb_details_extd3$star_power+1)
imdb_details_extd3$wr_pop <- log(imdb_details_extd3$wr_pop+1)
imdb_details_extd3$inf_adjusted_gp = imdb_details_extd3$inf_adjusted_gp^.25
## randomly select genres if more than one
tt<- lapply(imdb_details_extd3$genres, strsplit, ", ")
r_genre <- c()
for (i in 1:length(tt)) {
if (identical(tt[[i]][[1]], character(0))) {
name <- "None"
} else {
name <- sample(tt[[i]][[1]], 1)
}
r_genre <- c(r_genre, name)
}
imdb_details_extd3$genres <- r_genre
df <- filter(imdb_details_extd3, type == "Movie") %>%
na.omit()
data_split <- initial_split(df)
data_train <- training(data_split)
data_test <- testing(data_split)
# build recipe (just instructions)
model_rec <- recipe(inf_adjusted_gp ~  budget_adj+runtime+genres+rating+dir_pop_fac+release_period+
runtime+co_size+star_power+wr_pop,
data = data_train) %>%
step_other(genres, threshold = 0.03) %>%
step_unknown(genres) %>%
step_other(rating, threshold = 0.05) %>%
step_unknown(rating) %>%
step_dummy(all_nominal(), -all_outcomes())
# prep actually uses the data
model_prep <- prep(model_rec)
juiced <- juice(model_prep)
# run the below to check the step_other results (doesnt work if step_dummy already used)
# juiced %>% count(genres, sort = T)
# report details
summary(model_rec)
## build rf model with tuned params
final_rf <- rand_forest(
mtry = 7,
trees = 1100,
) %>%
set_mode("regression") %>%
set_engine("ranger")
# checking out importance plots
final_rf %>%
set_engine("ranger", importance = "permutation") %>%
fit(inf_adjusted_gp ~ .,
data = juice(model_prep)
) %>%
vip(geom = "col")+
labs(title="Variable Importances")+
scale_x_discrete(labels=rev(c("budget",
"runtime",
"company size",
"writer popularity",
"rating, R",
"star power",
"May to July release period",
"director popularity",
"rating, PG-13",
"Nov. to Jan. release period"))) +
theme_minimal() +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 25))
ggplot(imdb_details_extd3, aes(x=budget_adj, y=inf_adjusted_gp)) +
geom_point(color = "lightseagreen",show.legend = F) +
ylab("Gross Profit^.25") +
xlab("Inflation Adjusted Budget (Millions $)") +
ggtitle("Gross Profit^.25 Vs Inf. Adj. Budget") +
theme_minimal() +
ylim(0, 350) +
scale_x_continuous(labels = scales::label_comma(scale = 1e-6)) +
theme(plot.title = element_text(size = 35, face = "bold"),
axis.title.x = element_text(size = 30, margin = ggplot2::margin(t = 20)),
axis.title.y = element_text(size = 30, margin = ggplot2::margin(r = 20)),
axis.text = element_text(size = 30))
